# Dotfiles for paths
export DOTFILES=$HOME/.dotfiles

# ================================================================
# Plugins
# ================================================================

### Added by zinit's installer
source $HOME/.zinit/bin/zinit.zsh
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of zinit's installer chunk

# | completions | #
zinit ice from"gh" wait"1" silent pick"zsh-completions.plugin.zsh" lucid
zinit light zsh-users/zsh-completions
zinit ice from"gh" wait"!1" silent pick"zsh-completion-generator.plugin.zsh" lucid
zinit light RobSis/zsh-completion-generator

# | history | #
zinit ice wait"0" silent pick"history.zsh" lucid
zinit snippet OMZ::lib/history.zsh
zinit ice wait"0" silent pick"history.plugin.zsh" lucid
zinit snippet OMZ::plugins/history/history.plugin.zsh
# search history via substring
zinit ice from"gh" wait"1" silent pick"zsh-history-substring-search.plugin.zsh" lucid
zinit light zsh-users/zsh-history-substring-search
# search through long list of commands with Ctrl+R
zinit ice from"gh" wait"1" silent pick"history-search-multi-word.plugin.zsh" lucid
zinit light zdharma/history-search-multi-word

# | autosuggestions | #
zinit ice wait"0" atload"_zsh_autosuggest_start" lucid
zinit light zsh-users/zsh-autosuggestions

# | prompt | #
zinit ice pick"async.zsh" src"pure.zsh"; zinit light sindresorhus/pure

# | prezto utils | #
zinit ice svn; zinit snippet PZT::modules/environment
zinit ice svn; zinit snippet PZT::modules/terminal
zinit ice svn; zinit snippet PZT::modules/utility
zinit ice svn; zinit snippet PZT::modules/editor
zinit ice svn; zinit snippet PZT::modules/directory
zinit ice svn; zinit snippet PZT::modules/spectrum
zinit ice svn; zinit snippet PZT::modules/git
zinit ice svn; zinit snippet PZT::modules/homebrew

# | syntax highlighting | #
#zinit ice from"gh" wait"0" zsh-users/zsh-syntax-highlighting
zinit ice from"gh" wait"1" atinit"zpcompinit; zpcdreplay" lucid
zinit light zdharma/fast-syntax-highlighting

# Set VSCode as editor
export EDITOR="code --wait"
export HOMEBREW_EDITOR="vim"
export VISUAL="code --wait"

# # Set chruby
# source $(brew --prefix chruby)/share/chruby/chruby.sh
# source $(brew --prefix chruby)/share/chruby/auto.sh
# export PATH="/usr/local/opt/ruby/bin:$PATH"
# export PATH="/usr/local/lib/ruby/gems/2.5.0/bin:$PATH"

# Set Nodenv
eval "$(nodenv init - --no-rehash)"
# export NODENV_VERSION=10.16.3

# Set Node
# export PATH="/usr/local/opt/node@8/bin:$PATH"


# Set JS Api url
export JS_API_URL="192.168.1.101"

# Android crap
export ANDROID_SDK=$HOME/Library/Android/sdk
export PATH=$ANDROID_SDK/emulator:$ANDROID_SDK/tools:$PATH
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

# Set Stupid Java
JAVA_HOME=$(/usr/libexec/java_home)
export PATH=${JAVA_HOME}/bin:$PATH

# Source Homebrew Access Token
if [[ -s ~/.brewaccess ]]; then
  source ~/.brewaccess
fi

# Alias gcam because it nice
unalias g
alias gcam='git add . && git commit -am'
# Source functions.
if [[ -s "$DOTFILES/zsh/functions.zsh" ]]; then
  source "$DOTFILES/zsh/functions.zsh"
fi

# function to check if exists
exists() { type "$1" > /dev/null; }

# Alias code since i use insiders
if exists code-insiders; then
  alias code='code-insiders'
fi

# Alias exa
alias ll='exa -bghHliSa --git'

# Completions
# compinit

# Base16 Shell
if [ -z "$THEME" ]; then
    export THEME="base16-flat"
fi
if [ -z "$BACKGROUND" ]; then
    export BACKGROUND="dark"
fi

# # Set TMUX theme
# if [[ -n "$TMUX" ]]; then

#     tmux setenv -g TMUX_BACKGROUND $BACKGROUND
#     tmux source-file ~/.tmux.conf
#     # if [[ $BACKGROUND == dark ]]; then

#     # else
#     #     tmux source-file ~/.dotfiles/tmux/light.conf
#     # fi
# fi

# Alias updating submodules
alias updatesub='git submodule foreach git pull origin master'

BASE16_SHELL="$HOME/.config/base16-shell/scripts/$THEME.sh"
# [[ -s $BASE16_SHELL ]] && source $BASE16_SHELL
source $BASE16_SHELL
### End of Zinit's installer chunk
